
// This file is automatically generated. Do not edit it directly.
import { createClient } from "@supabase/supabase-js";
import { Database } from "@/types/database";
import { env } from "@/lib/config";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

let supabase;

try {
  // Access the environment variables using the correct names as defined in the config
  const supabaseUrl = env.VITE_PROJECT_URL;
  const supabaseAnonKey = env.VITE_SECRET_ANON_KEY;

  if (!supabaseUrl || !supabaseAnonKey) {
    console.warn("Missing Supabase environment variables, functionality may be limited");
    console.log("Supabase URL:", supabaseUrl);
    console.log("Supabase Anon Key:", supabaseAnonKey ? "Provided" : "Missing");
  }

  supabase = createClient<Database>(
    supabaseUrl || "",
    supabaseAnonKey || "",
    {
      auth: {
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: true,
        storage: localStorage
      }
    }
  );

  console.log("Supabase client initialized successfully");
} catch (error) {
  console.error("Error initializing Supabase client:", error);
  // Create a mock client for development that will not throw errors
  // This allows the app to at least render in development
  supabase = {
    auth: {
      getUser: () => Promise.resolve({ data: { user: null }, error: null }),
      onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } }),
      getSession: () => Promise.resolve({ data: { session: null }, error: null }),
      signOut: () => Promise.resolve({ error: null }),
    },
    from: () => ({
      select: () => ({ data: null, error: null }),
    }),
  };
}

export { supabase };
